// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: example.proto

#include "example.pb.h"
#include "example.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace volo {
namespace example {

static const char* ItemService_method_names[] = {
  "/volo.example.ItemService/GetItem",
};

std::unique_ptr< ItemService::Stub> ItemService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ItemService::Stub> stub(new ItemService::Stub(channel, options));
  return stub;
}

ItemService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetItem_(ItemService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ItemService::Stub::GetItem(::grpc::ClientContext* context, const ::volo::example::GetItemRequest& request, ::volo::example::GetItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::volo::example::GetItemRequest, ::volo::example::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetItem_, context, request, response);
}

void ItemService::Stub::async::GetItem(::grpc::ClientContext* context, const ::volo::example::GetItemRequest* request, ::volo::example::GetItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::volo::example::GetItemRequest, ::volo::example::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetItem_, context, request, response, std::move(f));
}

void ItemService::Stub::async::GetItem(::grpc::ClientContext* context, const ::volo::example::GetItemRequest* request, ::volo::example::GetItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::volo::example::GetItemResponse>* ItemService::Stub::PrepareAsyncGetItemRaw(::grpc::ClientContext* context, const ::volo::example::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::volo::example::GetItemResponse, ::volo::example::GetItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::volo::example::GetItemResponse>* ItemService::Stub::AsyncGetItemRaw(::grpc::ClientContext* context, const ::volo::example::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

ItemService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemService::Service, ::volo::example::GetItemRequest, ::volo::example::GetItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ItemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::volo::example::GetItemRequest* req,
             ::volo::example::GetItemResponse* resp) {
               return service->GetItem(ctx, req, resp);
             }, this)));
}

ItemService::Service::~Service() {
}

::grpc::Status ItemService::Service::GetItem(::grpc::ServerContext* context, const ::volo::example::GetItemRequest* request, ::volo::example::GetItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace volo
}  // namespace example
#include <grpcpp/ports_undef.inc>

